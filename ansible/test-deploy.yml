---
- name: DevOps Pets Test Deployment (Infrastructure Only)
  hosts: localhost
  gather_facts: no
  become: no
  vars:
    project_root: "{{ playbook_dir | realpath }}"
    k8s_path: "{{ project_root }}/k8s"
    cluster_name: "devops-pets"
    namespace: "devops-pets"
  
  tasks:
    - name: Display test deployment start
      debug:
        msg: |
          DEVOPS PETS TEST DEPLOYMENT
          ============================
          Infrastructure only - no image building
          Following order:
          1. Harsh cleanup
          2. Create Kind cluster
          3. Create namespace
          4. Apply manifests (using official images)
          5. Wait till ready
          6. Port forward

    # STEP 1: HARSH CLEANUP
    - name: Harsh cleanup - preserve jenkins_home and tools
      shell: |
        echo "=== STEP 1: HARSH CLEANUP ==="
        echo "PRESERVING: jenkins_home and system tools"
        
        # Show current state
        echo "Current clusters:"
        kind get clusters 2>/dev/null || echo "No kind clusters found"
        echo "Current namespaces:"
        kubectl get namespaces 2>/dev/null || echo "kubectl not available"
        
        # Force kill kubectl port-forward processes only
        echo "Killing kubectl port-forward processes..."
        pkill -f "kubectl port-forward" 2>/dev/null || true
        
        # Stop and remove devops-pets containers
        echo "Stopping and removing devops-pets containers..."
        docker ps -a | grep devops-pets | awk '{print $1}' | xargs -r docker stop 2>/dev/null || true
        docker ps -a | grep devops-pets | awk '{print $1}' | xargs -r docker rm 2>/dev/null || true
        
        # Delete devops-pets namespace only
        echo "Deleting devops-pets namespace..."
        if command -v kubectl >/dev/null 2>&1; then
          kubectl delete namespace {{ namespace }} --force --grace-period=0 --timeout=10s 2>/dev/null || true
        fi
        
        # Delete devops-pets cluster only
        echo "Deleting devops-pets cluster..."
        if command -v kind >/dev/null 2>&1; then
          kind delete cluster --name {{ cluster_name }} 2>/dev/null || true
        fi
        
        # Wait for everything to settle
        sleep 3
        
        echo "OK! HARSH CLEANUP completed (jenkins_home and tools preserved)"
      args:
        chdir: "{{ project_root }}"
      register: cleanup_result
      failed_when: false

    # STEP 2: CREATE KIND CLUSTER
    - name: Create jenkins_home directory
      file:
        path: "{{ project_root }}/jenkins_home"
        state: directory
        mode: '0755'

    - name: Create Kind cluster
      shell: |
        echo "=== STEP 2: CREATING KIND CLUSTER ==="
        kind create cluster --name {{ cluster_name }} --config kind-config.yaml
        echo "OK! Kind cluster created"
        
        echo "Verifying cluster..."
        kind get clusters
        kubectl cluster-info
      args:
        chdir: "{{ project_root }}"
      register: cluster_create

    # STEP 3: CREATE NAMESPACE
    - name: Create namespace
      shell: |
        echo "=== STEP 3: CREATING NAMESPACE ==="
        kubectl create namespace {{ namespace }}
        echo "OK! Namespace created"
        
        echo "Verifying namespace..."
        kubectl get namespaces | grep {{ namespace }}
      args:
        chdir: "{{ project_root }}"
      register: namespace_create

    # STEP 4: APPLY MANIFESTS (using official images)
    - name: Apply Jenkins manifests (official image)
      shell: |
        echo "=== STEP 4: APPLYING JENKINS MANIFESTS ==="
        echo "Using official jenkins/jenkins:lts image"
        
        # Create a temporary Jenkins deployment with official image
        cat > /tmp/jenkins-test.yaml << 'EOF'
        apiVersion: v1
        kind: Service
        metadata:
          name: jenkins
          namespace: devops-pets
        spec:
          ports:
          - port: 8080
            targetPort: 8080
          selector:
            app: jenkins
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: jenkins
          namespace: devops-pets
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: jenkins
          template:
            metadata:
              labels:
                app: jenkins
            spec:
              containers:
              - name: jenkins
                image: jenkins/jenkins:lts
                ports:
                - containerPort: 8080
                env:
                - name: JAVA_OPTS
                  value: "-Djenkins.install.runSetupWizard=false"
        EOF
        
        kubectl apply -f /tmp/jenkins-test.yaml
        echo "OK! Jenkins manifests applied"
        
        echo "Verifying Jenkins resources..."
        kubectl get all -n {{ namespace }}
      args:
        chdir: "{{ project_root }}"
      register: jenkins_apply

    # STEP 5: APPLY MAILHOG MANIFESTS
    - name: Apply MailHog manifests (official image)
      shell: |
        echo "=== STEP 5: APPLYING MAILHOG MANIFESTS ==="
        echo "Using official mailhog/mailhog:latest image"
        
        # Create a temporary MailHog deployment with official image
        cat > /tmp/mailhog-test.yaml << 'EOF'
        apiVersion: v1
        kind: Service
        metadata:
          name: mailhog
          namespace: devops-pets
        spec:
          ports:
          - port: 1025
            targetPort: 1025
          - port: 8025
            targetPort: 8025
          selector:
            app: mailhog
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: mailhog
          namespace: devops-pets
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: mailhog
          template:
            metadata:
              labels:
                app: mailhog
            spec:
              containers:
              - name: mailhog
                image: mailhog/mailhog:latest
                ports:
                - containerPort: 1025
                - containerPort: 8025
        EOF
        
        kubectl apply -f /tmp/mailhog-test.yaml
        echo "OK! MailHog manifests applied"
      args:
        chdir: "{{ project_root }}"
      register: mailhog_apply

    # STEP 6: APPLY POSTGRESQL MANIFESTS
    - name: Apply PostgreSQL manifests (official image)
      shell: |
        echo "=== STEP 6: APPLYING POSTGRESQL MANIFESTS ==="
        echo "Using official postgres:15 image"
        
        # Create a temporary PostgreSQL deployment with official image
        cat > /tmp/postgres-test.yaml << 'EOF'
        apiVersion: v1
        kind: Secret
        metadata:
          name: postgres-secret
          namespace: devops-pets
        type: Opaque
        data:
          password: cGFzc3dvcmQ=  # "password" in base64
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: postgres
          namespace: devops-pets
        spec:
          ports:
          - port: 5432
            targetPort: 5432
          selector:
            app: postgres
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: postgres
          namespace: devops-pets
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: postgres
          template:
            metadata:
              labels:
                app: postgres
            spec:
              containers:
              - name: postgres
                image: postgres:15
                ports:
                - containerPort: 5432
                env:
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: postgres-secret
                      key: password
                - name: POSTGRES_DB
                  value: "devops_pets"
        EOF
        
        kubectl apply -f /tmp/postgres-test.yaml
        echo "OK! PostgreSQL manifests applied"
      args:
        chdir: "{{ project_root }}"
      register: postgres_apply

    # STEP 7: WAIT FOR ALL SERVICES TO BE READY
    - name: Wait for all services to be ready
      shell: |
        echo "=== STEP 7: WAITING FOR ALL SERVICES TO BE READY ==="
        
        services=("jenkins" "mailhog" "postgres")
        
        for service in "${services[@]}"; do
          echo "Waiting for $service deployment to be ready..."
          
          max_attempts=30
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if kubectl get deployment $service -n {{ namespace }} --no-headers 2>/dev/null | grep -q "1/1"; then
              echo "OK! $service deployment is ready!"
              break
            fi
            
            echo "Attempt $attempt/$max_attempts - waiting 10 seconds..."
            sleep 10
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "ERR! $service deployment failed to become ready after $max_attempts attempts"
            exit 1
          fi
        done
        
        echo "OK! All services are ready!"
      args:
        chdir: "{{ project_root }}"
      register: services_ready

    # STEP 8: FINAL VERIFICATION
    - name: Final verification
      shell: |
        echo "=== STEP 8: FINAL VERIFICATION ==="
        echo "All pods in {{ namespace }} namespace:"
        kubectl get pods -n {{ namespace }}
        
        echo "All services in {{ namespace }} namespace:"
        kubectl get services -n {{ namespace }}
        
        echo "All deployments in {{ namespace }} namespace:"
        kubectl get deployments -n {{ namespace }}
        
        echo "OK! All services are deployed and ready!"
      args:
        chdir: "{{ project_root }}"
      register: final_verification

    # STEP 9: SETUP PORT FORWARDING
    - name: Setup port forwarding
      shell: |
        echo "=== STEP 9: SETTING UP PORT FORWARDING ==="
        echo "Setting up port forwarding for Jenkins (8082) and MailHog (8025)..."
        
        # Kill any existing port forwarding
        pkill -f "kubectl port-forward" 2>/dev/null || true
        
        # Start port forwarding in background
        kubectl port-forward -n {{ namespace }} service/jenkins 8082:8080 &
        JENKINS_PF_PID=$!
        
        kubectl port-forward -n {{ namespace }} service/mailhog 8025:8025 &
        MAILHOG_PF_PID=$!
        
        # Wait a moment for port forwarding to establish
        sleep 5
        
        echo "OK! Port forwarding started!"
        echo "Jenkins: http://localhost:8082"
        echo "MailHog: http://localhost:8025"
        echo ""
        echo "To stop port forwarding, run:"
        echo "kill $JENKINS_PF_PID $MAILHOG_PF_PID"
      args:
        chdir: "{{ project_root }}"
      register: port_forwarding

    # FINAL SUCCESS MESSAGE
    - name: Display final success message
      debug:
        msg: |
          ================================
          OK! DEVOPS PETS TEST DEPLOYMENT COMPLETED SUCCESSFULLY!
          ================================
          
          Infrastructure deployed with official images:
          - Jenkins (jenkins/jenkins:lts): http://localhost:8082
          - MailHog (mailhog/mailhog:latest): http://localhost:8025
          - PostgreSQL (postgres:15): Running in cluster
          
          ================================
          Useful commands:
          - Check services: kubectl get all -n {{ namespace }}
          - View logs: kubectl logs -n {{ namespace }}
          - Stop port forwarding: pkill -f 'kubectl port-forward'
          ================================ 